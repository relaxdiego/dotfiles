; vim: set ft=gitconfig:

{{ if not .shared_machine -}}
[user]
    name = {{ .fullname }}
    email = {{ .email }}
    signingkey = {{ .gpg_fingerprint }}

[github]
    user = {{ .github_username }}
{{- end }}

; The file below can contain conditional includes that customizes the [user]
; stanza according to the current path. For example, it might contain:
;
;   [includeIf "gitdir:~/src/github.com/company-name/"]
;      path = ~/.gitconfig-company-name
;
; The above means: if the current repo is a child of ~/src/../company-name,
; include ~/.gitconfig-company-name. In turn, the file ~/.gitconfig-company-name
; might contain:
;
;   [user]
;       email = myemailaddress@company-name.com
;       signingKey = <gpg-signing-key-associated-with-company-email>
;
; For more info on what the file can contain, see https://git-scm.com/docs/git-config
;
; NOTE: The file below is ensured present by run_000_ensure_files.sh.tmpl
[include]
    path = ~/.gitconfig-custom

[core]
    whitespace = trailing-space,space-before-tab
    excludesfile = ~/.gitignore_global
    editor = vim
    pager = delta

[user]
    # Avoid trying to guess defaults for user.name and user.email
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-useruseConfigOnly
	useConfigOnly = true

[init]
    templatedir = ~/.git-template
    defaultBranch = main

[commit]
    gpgsign = true
    template = ~/.git-commit-template.txt

[push]
    default = current

[apply]
    whitespace = strip

[pager]
    color = true

[status]
    color = true

[gpg]
{{- if eq .chezmoi.os "linux" }}
    program = gpg2
{{- else if eq .chezmoi.os "darwin" }}
    program = gpg
{{- end }}

[color]
    ui = auto
    branch = auto
    diff = auto
    status = auto
[color "branch"]
    current = green reverse
    local = green
    remote = red
[color "diff"]
    meta = yellow
    frag = magenta
    old = red
    new = green
[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    # Aliases used by other aliases below
    # From https://github.com/fcsonline/dotfiles/blob/7211d48fb06eec96a415063cf07df240096bc9bf/git/gitconfig#L32-L33
    recent = !git for-each-ref --sort=-committerdate --format='%(refname:short)' | head -n 100
    util-fixit  = "!f() { git commit --fixup=$1 && git add . && git stash >/dev/null && GIT_SEQUENCE_EDITOR=: git rebase -i --autosquash $1~1 && git stash pop >/dev/null; }; f"

    # From https://github.com/fcsonline/dotfiles/blob/7211d48fb06eec96a415063cf07df240096bc9bf/git/gitconfig#L32-L33
    co = !BRANCH=`git recent | fzf` && git checkout ${BRANCH}

    # From https://github.com/fcsonline/dotfiles/blob/7211d48fb06eec96a415063cf07df240096bc9bf/git/gitconfig#L32-L33
    fixup = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git util-fixit `echo ${HASH} | awk '{ print $1 }'`

    fa  = fetch --all
    far = fetch --all --recurse-submodules

    unstage = reset HEAD --
    undo    = reset --soft HEAD^  # Undo the last commit and put it back in the index
    rh      = reset --hard        # Clear all changes in workspace and index

    tree = log --graph --oneline --decorate --color --format='%C(auto)%h %C(green)%as%C(auto) %C("#666666")%an%C(auto)%d %s%C(reset)'
    t    = tree
    ta   = t --all
    ti   = t --format='%C(auto)%h %C(green)%ai%C(auto)%d %s%C(reset)'  # Tree, using ISO8601 format
    tai  = ti --all
    tr   = t --format='%C(auto)%h %C(green)%ar%C(auto)%d %s%C(reset)'  # Tree, using relative times
    tar  = tr --all

    # Branch stats
    stats = log --decorate --color --format='%n%C(auto)%h %C(green)%ai%C(auto) %C("#666666")%an%C(auto)%d %s%C(reset)' --compact-summary
    s     = stats
    sa    = stats --all

    # fzf goodness! From https://medium.com/hackernoon/be-125-more-efficient-with-git-60556a1ce971
    fuzzy-checkout = !BRANCH=`git recent | fzf` && git checkout ${BRANCH}
    fuzzy-add      = !FILES=`git status -s | awk '{ print $2 }' | fzf -x -m` && git add --all ${FILES}
    fuzzy-fix      = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git util-fixit `echo ${HASH} | awk '{ print $1 }'`
    fuzzy-show     = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git show `echo ${HASH} | awk '{ print $1 }'`
    fuzzy-log      = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && echo ${HASH} | awk '{ print $1 }' | xargs echo -n | pbcopy
    fuzzy-rebase   = !HASH=`git log --pretty=oneline | head -n 100 | fzf` && git rebase -i `echo ${HASH} | awk '{ print $1 }'`^
    fuzzy-vim      = !FILES=`git status -s | awk '{ print $2 }' | fzf -x -m` && vim -O ${FILES}
    fuzzy-grep     = !sh -c 'FILES=`git grep -l -A 0 -B 0 $1 $2 | fzf -x -m` && vim -O `echo ${FILES} | cut -d':' -f1 | xargs`' -
    fuzzy-vimlog   = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && HASHZ=`echo ${HASH} | awk '{ print $1 }'` && FILES=`git show --diff-filter=d --pretty='format:' --name-only $HASHZ | grep -v -e '^$' | fzf -x -m` && vim -O ${FILES}
    fuzzy-reset    = !HASH=`git log --pretty=oneline | head -n 50 | fzf` && git reset --soft `echo ${HASH} | awk '{ print $1 }'`^

[interactive]
    # https://git-scm.com/docs/git-config#Documentation/git-config.txt-interactivediffFilter
    diffFilter = delta --color-only

# git-delta https://github.com/dandavison/delta
# See: delta --help | less -R
[delta]
    navigate = true  # use n and N to move between diff sections
    side-by-side = false
    line-numbers = true
    whitespace-error-style = 22 reverse
    blame-code-style = syntax
    syntax-theme = "Visual Studio Dark+"
    features = line-numbers decorations
[delta "line-numbers"]
    line-numbers = true
    line-numbers-left-format = "{nm:>4}┊"
    line-numbers-left-style = "#666666"
    line-numbers-right-format = "{np:>4}│"
    line-numbers-right-style = "#666666"
[delta "decorations"]
    commit-decoration-style = bold yellow ol ul
    file-style = bold yellow ul
    file-decoration-style = none
    file-modified-label = modified:
    hunk-header-decoration-style = grey
    hunk-header-style = omit
    zero-style = dim syntax

[diff]
    colorMoved = default
# from: https://medium.com/@angielohqh/git-merging-with-3-way-vimdiff-5c59d9c62268
[difftool "vimdiff"]
    cmd = vimdiff \"$LOCAL\" \"$REMOTE\"

[merge]
   tool = vimdiff
[mergetool]
	keepBackup = false
# from: https://medium.com/@angielohqh/git-merging-with-3-way-vimdiff-5c59d9c62268
[mergetool "vimdiff"]
    cmd = vimdiff \"$LOCAL\" \"$MERGED\" \"$REMOTE\"

[filter "media"]
    required = true
    clean = git media clean %f
    smudge = git media smudge %f

[filter "lfs"]
	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

