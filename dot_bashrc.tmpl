#
# This file is managed by chezmoi. Always edit it with the command
# chezmoi edit ~/.bashrc
# chezmoi diff
# chezmoi -v apply
#

# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# bash completion for MacOS
[[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]] && . "/usr/local/etc/profile.d/bash_completion.sh"

# bash completion for AWS CLI
# Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-completion.html#cli-command-completion-configure
if which aws_completer >/dev/null; then
    complete -C "$(which aws_completer)" aws
fi

[ -r $HOME/.byobu/prompt ] && . $HOME/.byobu/prompt   #byobu-prompt#

# Ensure GPG works properly. https://github.com/keybase/keybase-issues/issues/2798
export GPG_TTY=$(tty)

[ -f ~/mount-home ] && ~/mount-home

export PATH=$PATH:$HOME/bin
export PATH=$HOME/node/current/bin:$PATH
[ -f ~/.fzf.bash ] && source ~/.fzf.bash

{{ if not .shared_machine -}}
# https://starship.rs/guide/#%F0%9F%9A%80-installation
# Note, startship is installed by chezmoi/run_once_001_install_starshipt.sh.tmpl
#
# Make sure to choose a Nerd Font at https://www.nerdfonts.com/font-downloads
eval "$(starship init bash)"
{{- end }}

alias k="kubectl"

{{ if eq .chezmoi.os "darwin" -}}
# Use GNU binaries in macOS instead of the BSD-flavored ones
gnu_binaries=(
    gnu-sed
    grep
    gnu-tar
    findutils
    coreutils
)
for binary in "${gnu_binaries[@]}"; do
    export PATH="$(brew --prefix)/opt/$binary/libexec/gnubin:$PATH"
done
{{- end }}

# Add dotfiles scripts to PATH
export PATH="$HOME/.local/dotfiles.relaxdiego.com:$PATH"

# Configure shell with rust goodness
rust_cargo_env=$HOME/.cargo/env
if [ -f $rust_cargo_env ]; then
  source $rust_cargo_env
fi

# Configure ssh-agent
# https://stackoverflow.com/a/38619604/402145
{{ if eq .chezmoi.os "linux" -}}
    if [ ! -S ~/.ssh/ssh_auth_sock ]; then
      eval `ssh-agent`
      ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
    fi
    export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
    # List known keys and if none is found, run ssh-add
    ssh-add -l > /dev/null || ssh-add
{{ end -}}

# Load direnv hooks
eval "$(direnv hook bash)"

# Load asdf goodness https://asdf-vm.com/
{{ if eq .chezmoi.os "darwin" -}}
. $(brew --prefix asdf)/asdf.sh
. $(brew --prefix asdf)/etc/bash_completion.d/asdf.bash
{{ else if eq .chezmoi.os "linux" -}}
. $HOME/.asdf/asdf.sh
. $HOME/.asdf/completions/asdf.bash
{{ end -}}
